package libheaven.core.marc

import org.junit.Test
import org.junit.Assert

class AnalyticalTest extends RecordTestBase {
	
  // Two examples from http://www.rusmarc.ru/rusmarc/format.html

  @Test
  def test200_7 = {
    val example = rusmarcRecord(Array(
        ("200", '1', ' ', Array(
              ('a', "Крепостной ансамбль Мангупа"), 
              ('f', "Герцен А. Г.")
          )),
        ("461", ' ', '0', Array(
              ('1', "001N записи на сводное описание "),
              ('1', "2001#$aМатериалы по археологии, истории и этнографии Таврии"), 
              ('1', "210##$aСимферополь$cТаврия") 
          )),
        ("463", ' ', '0', Array(
              ('1', "001N записи на Вып. 1 "),
//              ('1', "2000#$aВып. 1$vС. 87-166"), // original
              ('1', "2001#$aВып. 1$vС. 87-166"),
              ('1', "210##$d1990") 
          ))
    ))
//    val expected = "Крепостной ансамбль Мангупа / Герцен А. Г. // Материалы по археологии, истории и этнографии Таврии. – Симферополь : Таврия, 1990. – Вып. 1. – С. 87-166."
    // Roitman standard
    val expected = "Крепостной ансамбль Мангупа / Герцен А. Г. // Материалы по археологии, истории и этнографии Таврии. – Симферополь, 1990. – Вып. 1. – С. 87-166."
    val actual = example.analyticalDescription(null, null)
    println(actual)
    Assert.assertEquals(expected, actual)
  }

  @Test
  def test200_11 = {
    val example = rusmarcRecord(Array(
       ("200", '1', ' ', Array(
              ('a', "И вечен вешний свет"), 
              ('f', "А. Калинин")
          )),
       ("461", ' ', '0', Array(
              ('1', "2001#$aИзвестия") 
          )),
       ("463", ' ', '0', Array(
              ('1', "2001#$a26 окт."),
              ('1', "210##$d1982")
          ))
    ))
    val expected = "И вечен вешний свет / А. Калинин // Известия. – 1982. – 26 окт." // original
    val actual = example.analyticalDescription(null, null)
    println(actual)
    Assert.assertEquals(expected, actual)
  }

  /*
1. В Аналитическом описании (Библиографическое обслуживание) данные из поля
200$e должны быть включены в Биб. описание и на карточку. Они выводятся точно так же
как для книги т.е. после названия статьи должно быть двоеточие и эти свдения.
Например:
Придворов А.С.
   Магнолия : стихи / А.С. Придворов // Жизнь растений. - 2006. - № 1. -
С. 5-8.
А если это поле повторяется, то:
Придворов А.С.
   Магнолия : стихи : романы / А.С. Придворов // Жизнь растений. - 2006. - № 1. -
С. 5-8.
Если заполнено еще и 200$b, то должно быть:
Придворов А.С.
   Магнолия [Текст] : стихи : романы / А.С. Придворов // Жизнь растений. - 2006. - № 1. -
С. 5-8.

2. Области серии (поле 225) должна отсутствовать в описании идентифицирующего документа
   */
  @Test
  def analyticalTest1 = {
  	val example = rusmarcRecord(Array(
        ("200", '1', ' ', Array(
              ('a', "Рассказ о воспоминаниях старшего друга"), 
              ('b', "Видеозапись"),
              ('e', "Стихи"),
              ('e', "Рассказы"),
              ('f', "С.А.Бондарин")
          )),
        ("463", ' ', '0', Array(
              ('1', "001parentId"), 
              ('1', "2001#$vС. 76-132") 
          ))
    ))
  val rec_463 = rusmarcRecord(Array(
      ("200", '1', ' ', Array(
              ('a', "Златая цепь"), 
              ('e', "Записки. Повести. Рассказы")
          )),
      ("210", ' ', ' ', Array(
              ('a', "М."), 
              ('d', "1971")
          )),
      ("225", '1', ' ', Array(
              ('a', "Шедевры европейского искусства"), 
              ('d', "Masterpieces of jewish art") ,
              ('v', "2") ,
              ('z', "eng") 
          ))
  ))
    val expected = "Рассказ о воспоминаниях старшего друга [Видеозапись] : Стихи : Рассказы / С.А.Бондарин // Златая цепь. – М., 1971. – С. 76-132."
    val actual = example.analyticalDescription(rec_463, null)
    Assert.assertEquals(expected, actual)
  }
  

/*
Тест аналитической записи из тома
   место и год издания тома/ выпуска должны быть в описании и они должны предшествовать
номеру тома/выпуска. А место и год издания многотомного/сериального в целом не должны быть.
Первые сведения об ответственности должны быть, но первые сведения наоборот только из
описания на многотомное/сериальное в целом. Не должно быть двоеточия после номера тома,
если в записи на этот Сб. 71 было в поле 200 "Заглавие не является точкой доступа".
 */
  @Test
  def analyticalTest2 = {
    val example = rusmarcRecord(Array(
        ("200", '1', ' ', Array(
              ('a', "Книга и русскочитающее население ближнего зарубежья"), 
              ('f', "В.Ц. Худавердян, Х.Д.  Хамракулова")
          )),
        ("463", ' ', '0', Array(
              ('1', "2001#$vС. 19-31") 
          ))
     ))
  val rec_463 = rusmarcRecord(Array(
      ("200", '0', ' ', Array(
              ('a', "Сб. 71"), 
              ('f', "сост. А.П. Толстяков")
          )),
      ("210", ' ', ' ', Array(
              ('a', "М."), 
              ('c', "Терра"),
              ('d', "1995")
          )),
      ("215", '0', ' ', Array(
              ('a', "339 с.") 
          )),
      ("461", ' ', '0', Array(
              ('1', "2001#$aКнига. Исследования и материалы$vСб. 71") 
          ))
  ))
  val rec_461 = rusmarcRecord(Array(
      ("200", '1', ' ', Array(
              ('a', "Книга. Исследования и материалы"), 
              ('b', "Текст"),
              ('f', "РКП")
          )),
      ("210", ' ', ' ', Array(
              ('a', "М."), 
              ('c', "Терра"),
              ('d', "1959")
          ))
  ))
    val expected = "Книга и русскочитающее население ближнего зарубежья / В.Ц. Худавердян, Х.Д.  Хамракулова // Книга. Исследования и материалы / РКП. – М., 1995. – Сб. 71. – С. 19-31."
    val actual = example.analyticalDescription(rec_463, rec_461)
    Assert.assertEquals(expected, actual)
  }
  
/*
Тест аналитической записи из тома
А вот если у тома есть заглавие (200$a) и оно "Является точкой доступа", то тогда так:
// Книга. Исследования и материалы / РКП. - М., 1995. -  Сб. 71: Древняя книга . -  С. 19-31
 */
  @Test
  def analyticalTest3 = {
  val example = rusmarcRecord(Array(
      ("200", '1', ' ', Array(
              ('a', "Книга и русскочитающее население ближнего зарубежья"), 
              ('f', "В.Ц. Худавердян, Х.Д.  Хамракулова")
          )),
      ("463", ' ', '0', Array(
              ('1', "2000#$vС. 19-31") 
          ))
  ))
  val rec_463 = rusmarcRecord(Array(
      ("200", '1', ' ', Array(
              ('a', "Древняя книга"), 
              ('f', "сост. А.П. Толстяков")
          )),
      ("210", ' ', ' ', Array(
              ('a', "М."), 
              ('c', "Терра"),
              ('d', "1995")
          )),
     ("215", '0', ' ', Array(
              ('a', "339 с.") 
          )),
     ("461", ' ', '0', Array(
              ('1', "2001#$aКнига. Исследования и материалы$vСб. 71") 
          ))
  ))
  val rec_461 = rusmarcRecord(Array(
     ("200", '1', ' ', Array(
              ('a', "Книга. Исследования и материалы"), 
              ('b', "Текст"),
              ('f', "РКП")
          )),
     ("210", ' ', ' ', Array(
              ('a', "М."), 
              ('c', "Терра"),
              ('d', "1959")
          ))
  ))
    val expected = "Книга и русскочитающее население ближнего зарубежья / В.Ц. Худавердян, Х.Д.  Хамракулова // Книга. Исследования и материалы / РКП. – М., 1995. – Сб. 71 : Древняя книга. – С. 19-31."
    val actual = example.analyticalDescription(rec_463, rec_461)
    Assert.assertEquals(expected, actual)
  }
  

}